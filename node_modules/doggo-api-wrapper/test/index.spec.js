const nock = require('nock')
const URI = 'https://dog.ceo/api'

const DogApi = require('../index')
const dog = new DogApi()

describe('DogApi', () => {
  it('should be a class', () => {
    expect(dog instanceof DogApi).toBeTruthy()
  })

  describe('#getListOfAllBreeds', () => {
    it('should return the response without any errors', async () => {
      const endpoint = '/breeds/list/all'
      nock(URI)
        .get(endpoint)
        .reply(200, { status: "success" })
      const result = await dog.getListOfAllBreeds()
      expect(result).toMatchSnapshot()
    })
  })

  describe('#getARandomDog', () => {
    it('should return the response without any errors', async () => {
      const endpoint = '/breeds/image/random'
      nock(URI)
        .get(endpoint)
        .reply(200, { status: "success" })
      const result = await dog.getARandomDog()
      expect(result).toMatchSnapshot()
    })
  })

  describe('#getMultipleRandomDogs', () => {
    it('should return the response without any errors', async () => {
      const endpoint = '/breeds/image/random/3'
      nock(URI)
        .get(endpoint)
        .reply(200, { status: "success" })
      const result = await dog.getMultipleRandomDogs(3)
      expect(result).toMatchSnapshot()
    })
  })

  describe('#getAllDogsByBreeds', () => {
    it('should return the response without any errors', async () => {
      const endpoint = '/breed/hound/images'
      nock(URI)
        .get(endpoint)
        .reply(200, { status: "success" })
      const result = await dog.getAllDogsByBreed('hound')
      expect(result).toMatchSnapshot()
    })
  })

  describe('#getARandomDogFromBreed', () => {
    it('should return the response without any errors', async () => {
      const endpoint = '/breed/hound/images/random'
      nock(URI)
        .get(endpoint)
        .reply(200, { status: "success" })
      const result = await dog.getARandomDogFromBreed('hound')
      expect(result).toMatchSnapshot()
    })
  })

  describe('#getSubBreedFromBreed', () => {
    it('should return the response without any errors', async () => {
      const endpoint = '/breed/hound/list'
      nock(URI)
        .get(endpoint)
        .reply(200, { status: "success" })
      const result = await dog.getSubBreedFromBreed('hound')
      expect(result).toMatchSnapshot()
    })
  })

  describe('#getAllSubBreedImages', () => {
    it('should return the response without any errors', async () => {
      const endpoint = '/breed/terrier/fox/images'
      nock(URI)
        .get(endpoint)
        .reply(200, { status: "success" })
      const result = await dog.getAllSubBreedImages('terrier', 'fox')
      expect(result).toMatchSnapshot()
    })
  })

  describe('#getARandomSubBreedImage', () => {
    it('should return the response without any errors', async () => {
      const endpoint = '/breed/terrier/fox/images/random'
      nock(URI)
        .get(endpoint)
        .reply(200, { status: "success" })
      const result = await dog.getARandomSubBreedImage('terrier', 'fox')
      expect(result).toMatchSnapshot()
    })
  })
})
